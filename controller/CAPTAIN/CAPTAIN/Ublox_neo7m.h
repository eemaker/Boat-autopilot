#pragma once
#include "IGPS.h"
#include <thread>
#include "ISerial.h"

/**
 * \brief A implementation of the IGPS interface for a Ublox neo7m gps
 */
class Ublox_neo7m :
	public IGPS
{
public:
	/**
	 * \brief Explicit constructor
	 * \param serial A reference to a serial device, this should be connected to the GPS
	 */
	Ublox_neo7m(ISerial& serial);
	/**
	 * \brief Destructor
	 */
	~Ublox_neo7m();
	/**
	 * \brief Gets the latest Pose object generated in getGPSData.
	 * \return Returns the latest Pose from the GPS reciever.
	 */
	Pose GetPose() override;
	/**
	 * \brief Gets the latest speed generated by getGPSData
	 * \return Returns the latest speed from the GPS reviever.
	 */
	double GetSpeed() override;
	/**
	 * \brief Gets the gps status object, with the latest data generated by getGPSData
	 * \return Returns a GPS status object.
	 */
	GPSStatus GetStatus() override;
	/**
	 * \brief Setup the gps and create a thread that runs getGPSData
	 * \return A thread running getGPSData
	 * \see getGPSData
	 */
	std::thread Setup() override;

	/**
	 * \brief A gracefull stop for the thread created in Setup
	 * \details A gracefull stop is nice if the thread from Setup is wanted to be run detached.
	 * \see Setup
	 */
	void StopThread() override;

private:
	/**
	 * \brief Constantly reads on the serial device and save the date every time there is some.
	 * \details It only validates NMEA GGA and NMEA VTG telegrams. 
	 * \see http://www.gpsinformation.org/dale/nmea.htm#GGA, http://www.gpsinformation.org/dale/nmea.htm#VTG
	 */
	void getGPSData();

	/**
	* \breif Checks wether the given checksum in a telegram is correct
	* \param telegram This is a string containing a NMEA telegram from start to end
	* \return whether or not the telegram had a valid checksum
	*/
	bool checksum(std::string telegram);
	/**
	 * \brief Convert a coordnate from NMEA DegreeMinutes to just Degrees
	 * \param degree_minutes A notation for a coordinate, this is the notation of latitude and logitude in NMEA protocol
	 * \return Returns the a coordinate, which has a format which is used on online maps
	 */
	double convertDegreeMinutes2Degrees(std::string degree_minutes) const;
	/**
	 * \brief Calculate the pose with the correct coordinate and orientation according to the 2 coordinates given
	 * \param old_coordinate The position of the GPS reciver last time there was data
	 * \param new_coordinate The current position of the GPS reciver
	 * \return Returns a Pose object where in the Coordinate is the new_coordinate, but the Pose is the angle between the new and old coordinate
	 */
	Pose calculatePose(Coordinate old_coordinate, Coordinate new_coordinate);

private:
	/**
	 * \brief A reference to the serial device that the GPS reciever is connected to
	 */
	ISerial& serial_;
	/**
	 * \brief The current Pose of the gps reciever
	 */
	Pose pose_;
	/**
	 * \brief The Pose which is one time step old
	 */
	Pose old_pose_;
	/**
	 * \brief The current speed of the GPS receiver
	 */
	double speed_;
	/**
	 * \brief The GPSStaus object containing the fix, satellites, hdop and Pose
	 * \see GPSStatus::fix_
	 */
	GPSStatus status_;
	/**
	 * \brief Tells the thread returns by Setup whether or not to be running
	 * \see Setup, StopThread
	 */
	bool thread_run_;
};
